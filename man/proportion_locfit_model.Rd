% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/locfit-estimators.R
\name{proportion_locfit_model}
\alias{proportion_locfit_model}
\title{A binomial proportion estimate and associated exponential growth rate}
\usage{
proportion_locfit_model(
  d,
  ...,
  window = 14,
  deg = 2,
  frequency = "1 day",
  predict = TRUE
)
}
\arguments{
\item{d}{input dataframe with: \code{time} (as a \code{time_period}), \code{count}, and \code{denom} columns.
This must be ungrouped (but this function can be used directly within a \code{group_modify})}

\item{...}{not used and present to allow proportion model to be used in a \code{group_modify}}

\item{window}{a number of data points defining the bandwidth of the estimate, smaller values result in
less smoothing, large value in more.}

\item{deg}{polynomial degree}

\item{frequency}{the desired time unit between the output estimates.}

\item{predict}{result a prediction. If false we return the model.}
}
\value{
a new dataframe with columns \code{time} (as a time period), \code{proportion.0.5}
plus quantiles, and \code{relative.growth.0.5} (plus quantiles) columns or a list of
2 locfit model objects (one for proportion and one for relative growth rate)
}
\description{
takes a list of times and counts based on and fits a
quasi-binomial model fitted with a logit link function to proportion data
using local regression.
}
\details{
This expects d to contain one combination of:
\itemize{
\item \code{time} and \code{count} and \code{denom} columns - e.g. all tests conducted.
}

This results is a one versus others comparison binomial proportion estimate plus a
relative growth rate estimate.
}
\examples{
# 100 weeks from 2020-01-01

tmp = as.time_period(0:100, 7, "2020-01-01")
as.Date(tmp)

range(tmp)
min(tmp)
tmp2 = as.integer(as.Date(tmp))
# testthat::expect_true(all(na.omit(tmp2-lag(tmp2)) == 7))

tmp2 = as.time_period(0:23, 1/24, "2020-01-01")
as.POSIXct(tmp2)

# convert timeseries to new "unit"
tmp = as.time_period(0:100, 7, "2020-01-01")
tmp2 = as.time_period(tmp,1)
testthat::expect_equal(as.numeric(tmp2), 0:100*7)
}
