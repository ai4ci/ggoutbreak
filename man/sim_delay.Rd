% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation-utils.R
\name{sim_delay}
\alias{sim_delay}
\title{Apply a time-varying probability and delay function to linelist data}
\usage{
sim_delay(
  df = i_sim_linelist,
  p_fn,
  delay_fn,
  input = "time",
  output = "event",
  seed = Sys.time()
)
}
\arguments{
\item{df}{a line list dataframe arising from e.g. \code{\link[=sim_branching_process]{sim_branching_process()}}

A dataframe containing the following columns: 
\itemize{
\item id (unique_id) - Patient level unique id
\item time (ggoutbreak::time_period) - Time of infection. A `time_period`
}

Any grouping allowed.}

\item{p_fn}{Function that returns a probability between 0 and 1 for each row
of the input dataframe. A \code{purrr} style lambda is OK (e.g. \code{~ 1} for always
true) the first parameter of this will be time of infection. The function
must be vectorised on its inputs (and consume additional inputs with \code{...})}

\item{delay_fn}{A function that calculates the time to event onset from the
\code{input} time. This will be called with a vector of infection times as the
first parameter (\code{time}) but all other columns of \code{df} are also available
as well as the \code{symptomatic},\code{died},and \code{admitted} flags. The function must
be vectorised on its inputs (and consume additional inputs with \code{...}). A
\code{purrr} style lambda is OK e.g. \code{~ stats::rgamma(.x, shape = 3)}, and the
first parameter will be infection time. if you have an discrete probability
profile for this then you can use \code{cfg_ip_sampler_rng(ip_symptoms)} without
the tilde.}

\item{input}{a time column from which to calculate the delay from.}

\item{output}{an output column set name (defaults to \code{"event"})}
}
\value{
the line list with extra columns with prefix given by \code{output},
specifying whether the event was observed, the delay and the simulation
time.
}
\description{
Apply a time-varying probability and delay function to linelist data
}
\examples{

tmp = sim_branching_process(
  changes = tibble::tibble(t = c(0,20,40,60,80,110), R = c(1.8,1.5,0.9,1.5,0.8,1.2)),
  max_time = 120,
  seed = 100
)

tmp2 = tmp \%>\% sim_delay(
  p_fn = ~ rbern(.x, 0.8),
  delay_fn = ~ rgamma2(.x, mean = 5),
)
tmp2 \%>\% glimpse()

}
