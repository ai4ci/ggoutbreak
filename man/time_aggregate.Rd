% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/time-summarise.R
\name{time_aggregate}
\alias{time_aggregate}
\title{Aggregate time series data preserving the time series}
\usage{
time_aggregate(
  df = i_timestamped,
  ...,
  .groups = NULL,
  .cols = NULL,
  .fns = NULL
)
}
\arguments{
\item{df}{an optionally grouped time series. Grouping should not include the time
column. The grouping works differently from \code{dplyr::summarise} in that the last level
of non-time groups is lost in this operation, so the subgroup you wish to aggregate
should be included in the grouping.}

\item{...}{A set of \code{dplyr::summarise} statements, or additional parameters
for \code{.fns}}

\item{.groups}{as per \code{dplyr::summarise}}

\item{.cols}{Optional tidyselect column specification for \code{dplyr::across}. if
\code{.fns} is given and the \code{.cols} parameter is not specified then the columns
to summarise are automatically identified. In doing this any \code{Date} columns
are dropped. If this in not what you want then \code{.cols} or \code{...} must be given}

\item{.fns}{Optional a set of function specifications as per \code{dplyr::across}}
}
\value{
the summarised time series preserving the \code{time} column, and with the grouping
structure involving one fewer levels than the input
}
\description{
Aggregate time series data preserving the time series
}
\examples{
ggoutbreak::england_covid \%>\%
  time_aggregate(count = sum(count), denom = sum(denom)) \%>\%
  dplyr::glimpse()

ggoutbreak::england_covid \%>\%
  time_aggregate(.fns=mean) \%>\%
  dplyr::glimpse()
}
\concept{time_period}
