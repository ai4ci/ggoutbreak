% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/periodic-times.R
\name{cut_date}
\alias{cut_date}
\title{Places a set of dates within a regular time series}
\usage{
cut_date(
  dates,
  unit,
  anchor = "start",
  output = c("date", "factor", "time_period"),
  dfmt = "\%d/\%b/\%y",
  ifmt = "\%s â€” \%s",
  ...
)
}
\arguments{
\item{dates}{a set of dates}

\item{unit}{a period e.g. "1 week"}

\item{anchor}{one of a date, "start" or "end" or a weekday name e.g. "mon"
this will always be one of the start of the time periods we are cutting
into}

\item{output}{return the result as either a "date" (the default), an ordered
"factor" with the date ranges as a label, or as a "time_period". The result is
named with labels referring to the}

\item{dfmt}{the \code{strptime} format for the dates in the labels}

\item{ifmt}{a \code{sprintf} format for the period label containing \verb{\%s} exactly twice.}

\item{...}{ignored}
}
\value{
a set of dates, times or a factor level, representing the start of
the period the date falls into, where the period is defined by the duration
and the anchor
}
\description{
The counterpart to full_seq_dates(). Take an original set of data and place
it within a regular time series where the periodicity of the time series may
be expressed as numbers of days, weeks, months quarters, or years, and the
periods are defined by an anchoring date, day of the week or by reference to
the start or end of the input dates. This can either return the periods as
dates or factors (e.g. for plotting) or as a \code{time_period} for analysis that
relies on a numeric representation of the date or duration from the anchor.
}
\examples{
dates = as.Date(c("2020-01-01","2020-02-01","2020-01-15","2020-02-03",NA))
fs = tidyr::full_seq(dates, "2 days")
dates - cut_date(dates, "2 days")
cut_date(dates,unit="2 days", output="time_period")

# A weekly set of dates:
dates2 = Sys.Date() + floor(stats::runif(50,max=10))*7

# in this specific situation the final date is not truncated because the
# input data is seen as an exact match for the whole output period.
cut_date(dates2, "1 week", "sun", output="factor")
cut_date(dates2, dfmt = "\%d/\%b", output="factor", unit = "2 weeks", anchor="sun")

}
