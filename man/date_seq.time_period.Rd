% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/periodic-times.R
\name{date_seq.time_period}
\alias{date_seq.time_period}
\title{Expand a \code{time_period} vector to the full range of possible times}
\usage{
\method{date_seq}{time_period}(x, period = attributes(x)$unit, complete = FALSE, ...)
}
\arguments{
\item{x}{a time period vector}

\item{period}{the gap between observations as a number of days or as a natural
language definition of the period such as "1 week", '2 weeks', '1 month', etc.
If not given this will be derived from the dates.}

\item{complete}{truncate incomplete start and end periods}

\item{...}{ignored}
}
\value{
a vector of \code{time_periods} for regular periods between the minimum and maximum of
dates, with the boundaries defined by the anchor.
}
\description{
Derive from a vector of observation \code{time_periods}, a complete ordered sequence of
periods in a regular time series, where the length of the periods is
specified, as a number of days, weeks, years etc. E.g. this can convert a
random set of times to a ordered complete list of 1 week intervals (or 2
month intervals) spanning the same range as the dates. This has some
interesting problems regarding where to put breaks within a month or week.
Often this is either based on a specific date (e.g. yearly periods starting
at 2020-01-01) or a day of week (e.g. 2 weekly periods staring on a sunday)
or maybe relative to the input time series (weekly ending on the last date of
the data). There is also a problem when we consider data that may have
incomplete starting and end periods, which may not be comparable to other
periods, and we may need to exclude these from the result.
}
\examples{
tmp = as.time_period(c(0,10,100), 7, "2020-01-01")
date_seq(tmp, "7 days")
date_seq(tmp, "1 day")
}
\concept{time_period}
